name: Publish Release Images

on:
  schedule:
    - cron: "36 6 */7 * *"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: rmartin16/qbittorrent-nox
  CACHE_VER: "1"

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      qbittorrent-versions: ${{ steps.set-qbittorrent-versions.outputs.qbittorrent-versions }}
      qbittorrent-latest-version: ${{ steps.set-qbittorrent-versions.outputs.qbittorrent-latest-version }}
      libtorrent-versions: ${{ steps.set-libtorrent-versions.outputs.libtorrent-versions }}
      libtorrent-latest-version: ${{ steps.set-libtorrent-versions.outputs.libtorrent-latest-version }}

    steps:
      - name: Declare qBittorrent Versions
        id: set-qbittorrent-versions
        run: |  # find all releases >= v4.3.0
          VERS=$( \
            git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/qbittorrent/qBittorrent.git | \
            cut --delimiter='/' --fields=3 | \
            grep -v "\^{}" | \
            cut --delimiter='-' --fields=2 | \
            grep '^4\.[3-9]\.\d*.' \
          )

          LATEST_VER=$(echo ${VERS} | rev | cut -d' ' -f1 | rev)
          echo "Latest: ${LATEST_VER}"
          echo "::set-output name=qbittorrent-latest-version::${LATEST_VER}"

          VERS_MATRIX_LIST=$(echo ${VERS} | sed -z 's/ /","/g;s/,$/\n/')
          VERS_MATRIX_LIST="[\"${VERS_MATRIX_LIST}\"]"
          echo ${VERS_MATRIX_LIST}
          echo "::set-output name=qbittorrent-versions::${VERS_MATRIX_LIST}"

      - name: Declare libtorrent Versions
        id: set-libtorrent-versions
        run: |
          VERS=$( \
            git -c 'versionsort.suffix=-' ls-remote --tags --sort='v:refname' https://github.com/arvidn/libtorrent.git | \
            cut --delimiter='/' --fields=3 | \
            grep '^v2\.' \
          )
          
          LATEST_VER=$(echo ${VERS} | rev | cut -d' ' -f1 | rev | sed 's/v//')
          echo "Latest: ${LATEST_VER}"
          echo "::set-output name=libtorrent-latest-version::${LATEST_VER}"

          VERS_MATRIX_LIST=$(echo ${VERS} | sed 's/v//g' | sed -z 's/ /","/g;s/,$/\n/')
          VERS_MATRIX_LIST="[\"${VERS_MATRIX_LIST}\"]"
          echo ${VERS_MATRIX_LIST}
          echo "::set-output name=libtorrent-versions::${VERS_MATRIX_LIST}"

  build:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: read
      packages: write
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        QBITTORRENT_VER: ${{ fromJson(needs.setup.outputs.qbittorrent-versions) }}
        QBITTORRENT_BUILD_TYPE: [ "release", "debug" ]
        LIBTORRENT_VER: ${{ fromJson(needs.setup.outputs.libtorrent-versions) }}
        include:
          - BOOST_VERSION: "1_80_0"
        exclude:
          - LIBTORRENT_VER: "2.0.0"
          - LIBTORRENT_VER: "2.0.1"
          - LIBTORRENT_VER: "2.0.2"
          - LIBTORRENT_VER: "2.0.3"
          - LIBTORRENT_VER: "2.0.4"
          - LIBTORRENT_VER: "2.0.5"
          - LIBTORRENT_VER: "2.0.6"
          # incompatible with later versions of libtorrent (qbittorrent/qBittorrent/13981#issuecomment-746836281)
          - QBITTORRENT_VER: "4.3.0"
            QBITTORRENT_BUILD_TYPE: "debug"
          - QBITTORRENT_VER: "4.3.0.1"
            QBITTORRENT_BUILD_TYPE: "debug"
          - QBITTORRENT_VER: "4.3.1"
            QBITTORRENT_BUILD_TYPE: "debug"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache sources
        id: cache-sources
        uses: actions/cache@v3
        with:
          path: ./downloads
          key: sources-${{ env.CACHE_VER }}-${{ matrix.BOOST_VERSION }}

      - name: Download sources
        if: steps.cache-sources.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./downloads
          curl -NLk \
            "https://boostorg.jfrog.io/artifactory/main/release/$(echo ${{ matrix.BOOST_VERSION }} | sed 's/_/\./g')/source/boost_${{ matrix.BOOST_VERSION }}.tar.gz" \
            -o "./downloads/boost_${{ matrix.BOOST_VERSION }}.tar.gz"

      - name: Determine Qt Version
        id: qt
        run: |
          echo ::set-output name=version::"qt6"
          if [[ ${{ matrix.QBITTORRENT_VER }} = 4.3* ]]; then echo ::set-output name=version::"qt5"; fi
          if [[ ${{ matrix.QBITTORRENT_VER }} = 4.4.0beta* ]]; then echo ::set-output name=version::"qt5"; fi

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.title=qbittorrent-nox
            org.opencontainers.image.description=Headless qBittorrent v${{ matrix.QBITTORRENT_VER }} with libtorrent v${{ matrix.LIBTORRENT_VER }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          tags: |
            # v4.4.4 - specific qBittorrent with latest libtorrent
            type=raw,value=v${{ matrix.QBITTORRENT_VER }},enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'release' && matrix.LIBTORRENT_VER == needs.setup.outputs.libtorrent-latest-version }}
            # v4.4.4-2.0.7 - specific qBittorrent with specific libtorrent version
            type=raw,value=v${{ matrix.QBITTORRENT_VER }}-${{ matrix.LIBTORRENT_VER }},enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'release' }}
            # v4.4.4-debug - specific debug qBittorrent with latest libtorrent
            type=raw,value=v${{ matrix.QBITTORRENT_VER }}-debug,enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'debug' && matrix.LIBTORRENT_VER == needs.setup.outputs.libtorrent-latest-version }}
            # v4.4.4-2.0.7-debug - specific debug qBittorrent with specific libtorrent version
            type=raw,value=v${{ matrix.QBITTORRENT_VER }}-${{ matrix.LIBTORRENT_VER }}-debug,enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'debug' }}
            # latest - latest qBittorrent with latest libtorrent
            type=raw,value=latest,enable=${{ matrix.QBITTORRENT_VER == needs.setup.outputs.qbittorrent-latest-version && matrix.LIBTORRENT_VER == needs.setup.outputs.libtorrent-latest-version && matrix.QBITTORRENT_BUILD_TYPE == 'release' }}
            # debug - latest debug qBittorrent with latest libtorrent
            type=raw,value=debug,enable=${{ matrix.QBITTORRENT_VER == needs.setup.outputs.qbittorrent-latest-version && matrix.LIBTORRENT_VER == needs.setup.outputs.libtorrent-latest-version && matrix.QBITTORRENT_BUILD_TYPE == 'debug' }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BOOST_VERSION=${{ matrix.BOOST_VERSION }}
            LIBTORRENT_VERSION=${{ matrix.LIBTORRENT_VER }}
            QBT_VERSION=${{ matrix.QBITTORRENT_VER }}
            QBT_BUILD_TYPE=${{ matrix.QBITTORRENT_BUILD_TYPE }}
            QT_VERSION=${{ steps.qt.outputs.version }}
            CACHEBUST=${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}

      - name: Set up Python
        if: github.event_name != 'pull_request'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Verify image
        if: github.event_name != 'pull_request'
        id: verify
        run: |
          DOCKER_TAG=v${{ matrix.QBITTORRENT_VER }}-${{ matrix.LIBTORRENT_VER }}
          if [[ "${{ matrix.QBITTORRENT_BUILD_TYPE }}" = "debug" ]]; then DOCKER_TAG="${DOCKER_TAG}-debug"; fi
          docker run --rm -d --name qbt -p8080:8080 ${REGISTRY}/${IMAGE_NAME}:${DOCKER_TAG}
          python -m pip install qbittorrent-api
          docker logs qbt
          python -c 'from qbittorrentapi import Client; client=Client("localhost",8080,"admin","adminadmin"); print(f"{client.app.version=}")'

      - name: Send mail
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: ${{ github.job }} job of ${{ github.repository }} failed
          body: |
            ${{ github.job }} job in workflow ${{ github.workflow }} of ${{ github.repository }} failed.
            https://github.com/rmartin16/qbittorrent-api/actions/runs/${{ github.run_id }}
          to: rmartin16+github-action@gmail.com   # comma-separated string
          from: rmartin16+github-action@gmail.com
