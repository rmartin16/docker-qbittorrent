name: Publish Base Images

########################################################
#
# Builds base images to build qBittorrent
#
########################################################

on:
  schedule:
    - cron: "36 6 */7 * *"
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: rmartin16
  CACHE_VER: "1"
  BOOST_VERSION: "1_81_0"

jobs:

  setup:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      libtorrent-v1-version: ${{ steps.set-libtorrent-versions.outputs.libtorrent-v1-version }}
      libtorrent-v2-version: ${{ steps.set-libtorrent-versions.outputs.libtorrent-v2-version }}

    steps:
      - name: Declare libtorrent Versions
        id: set-libtorrent-versions
        run: |
          LATEST_V2=$( \
            git -c 'versionsort.suffix=-' ls-remote --tags --sort='-v:refname' https://github.com/arvidn/libtorrent.git | \
            cut --delimiter='/' --fields=3 | \
            grep '^v2\.' | \
            head -n1 | \
            sed 's/v//' \
          )
          echo "Latest v2: ${LATEST_V2}"
          echo "libtorrent-v2-version=${LATEST_V2}" >> ${GITHUB_OUTPUT}

          LATEST_V1=$( \
            git -c 'versionsort.suffix=-' ls-remote --tags --sort='-v:refname' https://github.com/arvidn/libtorrent.git | \
            cut --delimiter='/' --fields=3 | \
            grep '^v1\.2' | \
            head -n1 | \
            sed 's/v//' \
          )
          echo "Latest v1: ${LATEST_V1}"
          echo "libtorrent-v1-version=${LATEST_V1}" >> ${GITHUB_OUTPUT}

  build-base:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: read
      packages: write
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - LIBTORRENT_VER: ${{ needs.setup.outputs.libtorrent-v2-version }}
            LIBTORRENT_TAG: v2
          - LIBTORRENT_VER: ${{ needs.setup.outputs.libtorrent-v1-version }}
            LIBTORRENT_TAG: v1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache sources
        id: cache-sources
        uses: actions/cache@v3
        with:
          path: ./downloads
          key: sources-${{ env.CACHE_VER }}-${{ env.BOOST_VERSION }}

      - name: Download sources
        if: steps.cache-sources.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./downloads
          curl -NLk \
            "https://boostorg.jfrog.io/artifactory/main/release/$(echo ${{ env.BOOST_VERSION }} | sed 's/_/\./g')/source/boost_${{ env.BOOST_VERSION }}.tar.gz" \
            -o "./downloads/boost_${{ env.BOOST_VERSION }}.tar.gz"

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/qbittorrent-base
          flavor: |
            latest=false
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.title=qbittorrent v4.3.0 libtorrent ${{ matrix.LIBTORRENT_TAG }} builder
            org.opencontainers.image.description=Base to build qBittorrent 4.3.0+ using libtorrent ${{ matrix.LIBTORRENT_TAG }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          tags: |
            type=raw,value=libtorrent-${{ matrix.LIBTORRENT_TAG }}
            type=raw,value=latest,enable=${{ matrix.LIBTORRENT_VER == needs.setup.outputs.libtorrent-v2-version }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          file: All.Dockerfile
          target: qbittorrent-base
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BOOST_VERSION=${{ env.BOOST_VERSION }}
            LIBTORRENT_VERSION=${{ matrix.LIBTORRENT_VER }}

  build-legacy-base:
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      contents: read
      packages: write
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        include:
          - LIBTORRENT_VER: 1_1_14
            LIBTORRENT_TAG: 1_1_14
          - LIBTORRENT_VER: ${{ needs.setup.outputs.libtorrent-v1-version }}
            LIBTORRENT_TAG: v1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/qbittorrent-base
          flavor: |
            latest=false
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.title=qbittorrent v4.3.0 libtorrent v1 builder
            org.opencontainers.image.description=Base to build qBittorrent 4.3.0+ using libtorrent ${{ matrix.LIBTORRENT_TAG }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          tags: |
            type=raw,value=legacy-libtorrent-${{ matrix.LIBTORRENT_TAG }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          file: All.Legacy.Dockerfile
          target: qbittorrent-base
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: LIBTORRENT_VERSION=${{ matrix.LIBTORRENT_VER }}

  build-qbittorrent-dev:
    needs: build-base
    uses: ./.github/workflows/docker-publish-dev.yml

  build-qbittorrent-legacy:
    needs: build-legacy-base
    uses: ./.github/workflows/docker-publish-legacy.yml

  build-qbittorrent-release:
    needs: build-base
    uses: ./.github/workflows/docker-publish-release.yml
