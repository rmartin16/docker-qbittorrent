name: Publish Dev Images

########################################################
#
# Builds qBittorrent from dev branches
#
########################################################

on:
  schedule:
    - cron: "36 4 * * *"
  workflow_dispatch:
  workflow_call:

env:
  REGISTRY: ghcr.io
  REGISTRY_USER: rmartin16
  IMAGE_NAME: qbittorrent-nox

jobs:

  libtorrent-versions:
    uses: ./.github/workflows/libtorrent-latest-versions.yml

  build:
    runs-on: ubuntu-latest
    needs: libtorrent-versions
    permissions:
      contents: read
      packages: write
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        QBITTORRENT_VERSION: [ "master", "v4_5_x", "v4_4_x", "v4_3_x" ]
        QBITTORRENT_BUILD_TYPE: [ "release", "debug" ]
        LIBTORRENT_VERSION: [ "${{ needs.libtorrent-versions.outputs.libtorrent-v1-version }}", "${{ needs.libtorrent-versions.outputs.libtorrent-v2-version }}" ]
        include:
          - LIBTORRENT_VERSION: ${{ needs.libtorrent-versions.outputs.libtorrent-v1-version }}
            LIBTORRENT_TAG: "v1"
          - LIBTORRENT_VERSION: ${{ needs.libtorrent-versions.outputs.libtorrent-v2-version }}
            LIBTORRENT_TAG: "v2"

    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine Qt Version
        id: qt
        run: |
          echo "version=qt6" >> ${GITHUB_OUTPUT}
          if [[ ${{ matrix.QBITTORRENT_VERSION }} = v4_3* ]]; then
            echo "version=qt5" >> ${GITHUB_OUTPUT};
          fi

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}
          flavor: latest=false
          labels: |
            maintainer=${{ github.repository_owner }}
            org.opencontainers.image.title=qbittorrent-nox
            org.opencontainers.image.description=Headless qBittorrent ${{ matrix.QBITTORRENT_VERSION }} using libtorrent ${{ matrix.LIBTORRENT_VERSION }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
          tags: |
            # master - specific qBittorrent with latest v2 libtorrent
            type=raw,value=${{ matrix.QBITTORRENT_VERSION }},enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'release' && matrix.LIBTORRENT_TAG == 'v2' }}
            # master-v1/2 - specific qBittorrent with latest v1/2 libtorrent
            type=raw,value=${{ matrix.QBITTORRENT_VERSION }}-${{ matrix.LIBTORRENT_TAG }},enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'release'}}
            # master-debug - specific debug qBittorrent with latest v2 libtorrent
            type=raw,value=${{ matrix.QBITTORRENT_VERSION }}-debug,enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'debug' && matrix.LIBTORRENT_TAG == 'v2' }}
            # master-v1/2-debug - specific debug qBittorrent with latest v1/2 libtorrent
            type=raw,value=${{ matrix.QBITTORRENT_VERSION }}-${{ matrix.LIBTORRENT_TAG }}-debug,enable=${{ matrix.QBITTORRENT_BUILD_TYPE == 'debug' }}

      - name: Build image
        uses: docker/build-push-action@v4
        with:
          file: All.Dockerfile
          target: release
          context: .
          load: true
          cache-from: type=gha,scope=${{ matrix.LIBTORRENT_TAG }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            LIBTORRENT_VERSION=${{ matrix.LIBTORRENT_VERSION }}
            QBT_VERSION=${{ matrix.QBITTORRENT_VERSION }}
            QBT_BUILD_TYPE=${{ matrix.QBITTORRENT_BUILD_TYPE }}
            QT_VERSION=${{ steps.qt.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Verify image
        run: |
          DOCKER_TAG=${{ matrix.QBITTORRENT_VERSION }}-${{ matrix.LIBTORRENT_TAG }}
          if [[ "${{ matrix.QBITTORRENT_BUILD_TYPE }}" = "debug" ]]; then DOCKER_TAG="${DOCKER_TAG}-debug"; fi
          docker run -d --name qbt -p8080:8080 ${REGISTRY}/${REGISTRY_USER}/${IMAGE_NAME}:${DOCKER_TAG}
          python -m pip install qbittorrent-api
          docker logs qbt
          python -c 'from qbittorrentapi import Client; client=Client("localhost",8080,"admin","adminadmin"); print(f"{client.app.version=}"); print(f"{client.app.build_info=}"); assert client.app.build_info.libtorrent=="${{ matrix.LIBTORRENT_VERSION }}.0"'
          docker exec qbt /bin/sh -c "tail -n+1 /build_commit.*"

      - name: Publish image to ghcr.io
        if: github.event_name != 'pull_request'
        run: docker push --all-tags ${{ env.REGISTRY }}/${{ env.REGISTRY_USER }}/${{ env.IMAGE_NAME }}
